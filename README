-> Instalando o vraptor-console

	1) Baixe o vraptor-console-0.7.0-SNAPSHOT.tar.gz no link: 
		http://code.google.com/p/vraptor-console/downloads/list
	2) Extraia o arquivo para algum diretório na sua máquina, por exemplo: 
		$ tar xzf vraptor-console-0.7.0-SNAPSHOT.tar.gz -C ~/programs
	3) Coloque no final do seu arquivo seu .bashrc o comando: 
		export PATH=$PATH:~/programs/vraptor-console/
	obs: Para abrir o .bashrc basta abrir em algum editor, como por exemplo:
		$ gedit ~/.bashrc &
	4) No terminal execute o comando:
		$ bash
	5) Para ver se deu tudo certo tente rodar o comando:
		$ vraptor-console

-> Instalando o maven
	
	Para instalar o maven em sua máquina rode os comandos:
		$ sudo apt-get install maven
		$ sudo apt-get install maven2

-> Criando um projeto com vraptor-console

	Para criar o seu projeto rode o comando: 
		$ vraptor-console new com.< company >.< package > < appname >

-> Importando o projeto no eclipse

	1) Vá para diretório do seu projeto e rode o comando:
		$ mvn eclipse:eclipse
	2) Abra o seu eclipse. Teremos que instalar um plugin maven no eclipse. No eclipse vá em:
		Help > Eclipse Marketplace...
	   E busque pelo m2e-apt. Instale o plugin.
	3) Importe o projeto em seu eclipse. Para isso vá em:
		File > Import... > Existing Projects into Workspace
	4) Passe o diretório do seu projeto.

-> Rodando o projeto localmente

	1) No terminal, vá para o diretório do seu projeto e rode o comando:
		vraptor-console
	2) Quando o vraptor-console tiver subido dê o comando run. Isso irá subir o jetty.
	obs: toda vez que for necessário refazer o build do projeto não é necessário derrubar o 
vraptor-console. Basta dar o comando run novamente.

-> Baixando o Heroku

	Para baixar o heroku na sua máquina rode o comando:
		$ wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
	Para criar sua conta basta acessar o site: 
		https://id.heroku.com/signup

-> Fazendo o deploy no heroku

	1) Primeiramente será necessário criar um repositório git no seu projeto. Pelo terminal execute os comandos:
		$ git init .
		$ git add .
		$ git commit -m "initial commit"
	2) Para colocar o seu projeto no heroku rode os comandos: 
		$ heroku create <nome da aplicacao no heroku>
		$ heroku plugins:install https://github.com/heroku/heroku-buildpacks
		$ heroku buildpacks:set csokol/vraptor-buildpack -a <nome da aplicacao no heroku>
		$ git push heroku master
	3) Toda vez que for necessário fazer o deploy no heroku basta rodar o comando:
		$ git push heroku master
	4) Se você acessar o link: 
		<nome da aplicacao no heroku>.heroku.com
	você acessará sua aplicação no servidor.

-> Configurando o Hibernate

	Para configurar o hibernate no seu projeto, primeiramente teremos que colocar libs no maven.
	No nosso exemplo abaixo estamos configurando um hibernate com banco postgresql.
	1) No seu eclipse abra o arquivo pom.xml. Depois das linhas:
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.3.0.Final</version>
		</dependency>
	Coloqueas as seguintes linhas:
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>4.3.0.Final</version>
 		</dependency>
 		<dependency>
	     		<groupId>postgresql</groupId>
	     		<artifactId>postgresql</artifactId>
	     		<version>9.1-901-1.jdbc4</version>
 		</dependency>
 		<dependency>
	     		<groupId>br.com.caelum.vraptor</groupId>
	     		<artifactId>vraptor-jpa</artifactId>
	     		<version>1.0.1</version>
		</dependency>
	2) No pacote src/main/resources crie um folder chamado META-INF. Neste folder, crie um arquivo xml chamado persistence.xml, em que faremos as configurações do banco de dados que será usado. Por exemplo:
		<?xml version="1.0" encoding="UTF-8"?>
		<persistence xmlns="http://java.sun.com/xml/ns/persistence"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
			http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
			version="2.0">
			<persistence-unit name="default">
				<properties>
					<property name="javax.persistence.jdbc.driver" 
						value="org.postgresql.Driver" />
					<property name="javax.persistence.jdbc.url" 
						value="jdbc:postgresql://localhost/< nomde do banco >"/>
					<property name="javax.persistence.jdbc.user" 
						value="< nome do usuario >" />
					<property name="javax.persistence.jdbc.password" 
						value="< senha do usuario >"/>
		
					<property name="hibernate.dialect" 
						value="org.hibernate.dialect.PostgreSQLDialect"/>
					<property name="hibernate.show_sql" value="false" />
					<property name="hibernate.format_sql" value="true" />
					<property name="hibernate.hbm2ddl.auto" value="update" />
				</properties>
			</persistence-unit>
		</persistence>
	3) Para rodar localmente bastaria criar o baco com os nomes que foram especificados no xml.
	No caso do postgre, para criar um banco e usuario basta seguir o tutorial no site:
 		http://www.cyberciti.biz/faq/howto-add-postgresql-user-account/

-> Projeto exemplo da Monitoria

	Provisoriamente, existe um exemplo do projeto no repositório: 
		https://github.com/lucaspalma/monitoria
	Para rodar o código basta clonar o projeto na sua máquina. 
	Depois será necessário criar um banco postgresql, cujo nome do banco será monitoria, usuario labxp e senha labxp. Para saber como criar usuario (com a senha), e o banco basta seguir o passo a passo deste tutorial:
		http://www.cyberciti.biz/faq/howto-add-postgresql-user-account/
	obs 1: O nome do usuario, senha e nome do banco devem ser os mesmos que você colocou no persistence.xml
	obs 2: No "Step # 2: Becoming a superuser", se você não souber sua senha postgres, basta dar o comando:
		$ sudo su - postgres
	     Assim pode usar sua senha de usuário para logar como postgres.
	Com o banco criado rode o comando mvn eclipse:eclipse, usar o comando o vraptor-console e dar o run. Se tudo estiver certo você conseguirá acessar localmente no:
		localhost:8080

-> Organização do exemplo monitoria

	O projeto de exemplo tem como principais diretorios o:
		- src/main/java/br/usp/ime/monitoria/monitoria: onde estão os arquivos .java, organizados em diretorios controller, dao e modelo. O controller e modelo fazem parte do padrão MVC, enquanto o dao são as classes que se comunicam com o banco.
		- src/main/webapp/WEB-INF/jsp: onde estão as views do padrão MVC.
	O response entre as jsp's e as classes controller ocorre a partir do nome do diretorio no src/main/webapp/WEB-INF/jsp e o nome do controller. Todos os métodos no controller, após o término de sua execução, redirecionam para uma jsp com o mesmo nome do método.
	No nosso exemplo, temos o diretório home em src/main/webapp/WEB-INF/jsp que contém a home.jsp e cadastraProfessor.jsp. Na classe HomeController no src/main/java/br/usp/ime/monitoria/monitoria/controller temos os métodos home() e cadastraProfessor(). Assim após a execução do home() o usuário será redirecionado para a home.jsp. O mesmo ocorre com o cadastraProfessor() e o cadastraProfessor.jsp.
	Já o request é feito a partir da action de um form na jsp e a url presente nas annottations @Get ou @Post nos métodos do controller que farão o response. No nosso exemplo, a home.jsp possui um form com a action "/cadastraProfessor" e o method "post". ao clicar no input de tipo submit o VRaptor irá procurar por algum método com a annotation @Post("/cadastraProfessor"), que no exemplo se encontra n HomeController.

->Annotations importantes do vraptor/hibernate

	O Vraptor fornece algumas annotations importantes para dizer o que é cada classe java no padrão MVC.
	As classes controller precisam ter a annotation @Resource, como pode ser visto na HomeController. E os métodos dos controllers que vão ser chamados pelas jsps precisam ter um @Get ou @Post.
	Já as classes modelo devem ser marcadas com @Entity.
	Já as classes dao podem ser marcadas com o @Component, que garantem a injeção de dependências dessas classes. Assim podemos simplesmente receber objetos dessas classes nos construtores dos controllers que o vraptor se encarrega de criar o objeto e passar pro construtor.

-> Links úteis

	-vraptor-console:
		https://github.com/caelum/vraptor-console
	-libs do maven para o pom.xml:
		http://search.maven.org/
	-postgresql:
		http://www.cyberciti.biz/faq/howto-add-postgresql-user-account/
	-heroku: 		
		https://devcenter.heroku.com/categories/java		
		https://devcenter.heroku.com/categories/database









